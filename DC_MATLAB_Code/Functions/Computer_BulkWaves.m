% =========================================================================
% Dispersion Calculator
% Created by Armin Huber
% -------------------------------------------------------------------------
% MIT License
% 
% Copyright (C) 2018-2025 DLR
% 
% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
% 
% The above copyright notice and this permission notice shall be included in all
% copies or substantial portions of the Software.
% 
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
% SOFTWARE.
% =========================================================================
function [PhaseVelocityCartesian,GroupVelocityCartesian,SlownessCartesian,PolarizationSkewCartesian,EnergySkewCartesian,X3D] = Computer_BulkWaves(Material,PhiStep,ThetaStep,OutputWindowUI8)
%#ok<*AGROW>
Phi = 0:PhiStep:90;
Phi(1) = .001;
Phi(end) = 89.999;
if  strcmp(Material.Class,'Cubic')
    Phi(Phi == 45) = 45.001;
end
Theta = 0:ThetaStep:90;
Theta(1) = .001;
Theta(end) = 89.999;
C = real(Material.C);
Extrema(26) = 0;
Extrema(4,3:end) = 1e9;
X3D(length(Phi)*(4*length(Theta)-3),26) = 0;
a21 = (C(1,1)*C(2,2)+C(1,1)*C(4,4)+C(2,2)*C(5,5)+C(4,4)*C(6,6)+C(5,5)*C(6,6)-2*C(1,2)*C(6,6)-C(1,2)^2)/Material.Density^2;
a22 = (C(1,1)*C(3,3)+C(1,1)*C(4,4)+C(3,3)*C(6,6)+C(4,4)*C(5,5)+C(5,5)*C(6,6)-2*C(1,3)*C(5,5)-C(1,3)^2)/Material.Density^2;
a23 = (C(2,2)*C(3,3)+C(2,2)*C(5,5)+C(3,3)*C(6,6)+C(4,4)*C(5,5)+C(4,4)*C(6,6)-2*C(2,3)*C(4,4)-C(2,3)^2)/Material.Density^2;
a24 = (C(1,1)*C(5,5)+C(1,1)*C(6,6)+C(5,5)*C(6,6))/Material.Density^2;
a25 = (C(2,2)*C(4,4)+C(2,2)*C(6,6)+C(4,4)*C(6,6))/Material.Density^2;
a26 = (C(3,3)*C(4,4)+C(3,3)*C(5,5)+C(4,4)*C(5,5))/Material.Density^2;
a31 = (C(1,1)*C(2,3)^2+C(2,2)*C(1,3)^2+C(3,3)*C(1,2)^2-C(1,1)*C(2,2)*C(3,3)+2*(C(1,1)*C(2,3)*C(4,4)+C(1,3)*C(2,2)*C(5,5)+C(1,2)*C(3,3)*C(6,6)-C(1,2)*C(1,3)*C(2,3)-C(1,2)*C(1,3)*C(4,4)-C(1,2)*C(2,3)*C(5,5)-C(1,3)*C(2,3)*C(6,6)-C(1,2)*C(4,4)*C(5,5)-C(1,3)*C(4,4)*C(6,6)-C(2,3)*C(5,5)*C(6,6)-2*C(4,4)*C(5,5)*C(6,6)))/Material.Density^3;
a32 = (C(1,2)^2*C(4,4)-C(1,1)*C(2,2)*C(4,4)-C(2,2)*C(5,5)*C(6,6)+2*C(1,2)*C(4,4)*C(6,6))/Material.Density^3;
a33 = (C(1,3)^2*C(4,4)-C(1,1)*C(3,3)*C(4,4)-C(3,3)*C(5,5)*C(6,6)+2*C(1,3)*C(4,4)*C(5,5))/Material.Density^3;
a34 = (C(1,2)^2*C(5,5)-C(1,1)*C(2,2)*C(5,5)-C(1,1)*C(4,4)*C(6,6)+2*C(1,2)*C(5,5)*C(6,6))/Material.Density^3;
a35 = (C(1,3)^2*C(6,6)-C(1,1)*C(3,3)*C(6,6)-C(1,1)*C(4,4)*C(5,5)+2*C(1,3)*C(5,5)*C(6,6))/Material.Density^3;
a36 = (C(2,3)^2*C(5,5)-C(2,2)*C(3,3)*C(5,5)-C(3,3)*C(4,4)*C(6,6)+2*C(2,3)*C(4,4)*C(5,5))/Material.Density^3;
a37 = (C(2,3)^2*C(6,6)-C(2,2)*C(3,3)*C(6,6)-C(2,2)*C(4,4)*C(5,5)+2*C(2,3)*C(4,4)*C(6,6))/Material.Density^3;
a38 = -C(1,1)*C(5,5)*C(6,6)/Material.Density^3;
a39 = -C(2,2)*C(4,4)*C(6,6)/Material.Density^3;
a30 = -C(3,3)*C(4,4)*C(5,5)/Material.Density^3;
if  ~strcmp(Material.Class,'Isotropic')
    for i = 1:length(Phi)
        X = [];
        n = [cosd(Theta)'.*cosd(Phi(i))' cosd(Theta)'.*sind(Phi(i))' sind(Theta)']; % propagation direction vector matrix for the bulk waves
        A1 = -(C(1,1)*n(:,1).^2+C(2,2)*n(:,2).^2+C(3,3)*n(:,3).^2+C(4,4)*n(:,2).^2+C(4,4)*n(:,3).^2+C(5,5)*n(:,1).^2+C(5,5)*n(:,3).^2+C(6,6)*n(:,1).^2+C(6,6)*n(:,2).^2)/Material.Density;
        A2 = a21*n(:,1).^2.*n(:,2).^2+a22*n(:,1).^2.*n(:,3).^2+a23*n(:,2).^2.*n(:,3).^2+a24*n(:,1).^4+a25*n(:,2).^4+a26*n(:,3).^4;
        A3 = a31*n(:,1).^2.*n(:,2).^2.*n(:,3).^2+a32*n(:,1).^2.*n(:,2).^4+a33*n(:,1).^2.*n(:,3).^4+a34*n(:,1).^4.*n(:,2).^2+a35*n(:,1).^4.*n(:,3).^2+a36*n(:,2).^2.*n(:,3).^4+a37*n(:,2).^4.*n(:,3).^2+a38*n(:,1).^6+a39*n(:,2).^6+a30*n(:,3).^6;
        Xa = A2/3-A1.^2/9;
        Xb = A1.^3/27-A1.*A2/6+A3/2;
        Xc = (sqrt(Xb.^2+Xa.^3)-Xb).^(1/3);
        Xd = Xa./(2*Xc)-Xc/2;
        Xe = Xa./Xc;
        Xf = (sqrt(3)*(Xc+Xe)*1i)/2;
        X(:,3) = abs(real(sqrt(Xd-Xf-A1/3)))/1e3; % phase velocity in the solid (m/ms)
        X(:,4) = abs(real(sqrt(Xd+Xf-A1/3)))/1e3;
        X(:,5) = abs(real(-sqrt(Xc-Xe-A1/3)))/1e3;
        for j = 1:length(n) % solving the Christoffel equation for the phase velocities X of the bulk waves in terms of the propagation direction vector matrix n [1], p. 41-42: the determinant is given as polynomial v^6+A1*v^4+A2*v^2+A3 = 0; the roots X are given by analytical expressions
            B = [C(1,1)*n(j,1)^2+C(6,6)*n(j,2)^2+C(5,5)*n(j,3)^2 (C(1,2)+C(6,6))*n(j,1)*n(j,2) (C(1,3)+C(5,5))*n(j,1)*n(j,3);0 C(6,6)*n(j,1)^2+C(2,2)*n(j,2)^2+C(4,4)*n(j,3)^2 (C(2,3)+C(4,4))*n(j,2)*n(j,3);0 0 C(5,5)*n(j,1)^2+C(4,4)*n(j,2)^2+C(3,3)*n(j,3)^2]/Material.Density;
            if  strcmp(Material.Class,'Orthotropic') || strcmp(Material.Class,'Cubic') 
                for k = 1:3
                    p(1,k) = 1; % bulk wave amplitude U1, i.e., polarization component along x1; U1 = 1
                    p(2,k) = (B(2,3)*(B(1,1)-(X(j,k+2)*1e3)^2)-B(1,3)*B(1,2))/(B(1,3)*(B(2,2)-(X(j,k+2)*1e3)^2)-B(1,2)*B(2,3)); % bulk wave amplitude ratio U2/U1, i.e., polarization component along x2
                    p(3,k) = ((B(1,1)-(X(j,k+2)*1e3)^2)*(B(2,2)-(X(j,k+2)*1e3)^2)-B(1,2)^2)/(B(1,2)*B(2,3)-B(1,3)*(B(2,2)-(X(j,k+2)*1e3)^2)); % bulk wave amplitude ratio U3/U1, i.e., polarization component along x3
                end
            elseif strcmp(Material.Class,'Transversely isotropic')
                for k = [1 3]
                    p(1,k) = 1; % bulk wave amplitude U1, i.e., polarization component along x1; U1 = 1
                    p(2,k) = (B(2,3)*(B(1,1)-(X(j,k+2)*1e3)^2)-B(1,3)*B(1,2))/(B(1,3)*(B(2,2)-(X(j,k+2)*1e3)^2)-B(1,2)*B(2,3)); % bulk wave amplitude ratio U2/U1, i.e., polarization component along x2
                    p(3,k) = ((B(1,1)-(X(j,k+2)*1e3)^2)*(B(2,2)-(X(j,k+2)*1e3)^2)-B(1,2)^2)/(B(1,2)*B(2,3)-B(1,3)*(B(2,2)-(X(j,k+2)*1e3)^2)); % bulk wave amplitude ratio U3/U1, i.e., polarization component along x3
                end
                p(1,2) = 0;
                p(2,2) = 1; % S_slow is always polarized normal to the fibers, i.e., in the x2-x3-plane only
                p(3,2) = -(B(2,2)-(X(j,4)*1e3)^2)/B(2,3); % bulk wave amplitude ratio U3/U2, i.e., polarization component along x3
            end
            for k = 1:3 % calculating the polarizations, k=1: S_fast, k=2: S_slow, k=3: L
                p(:,k) = p(:,k)/sqrt(sum(p(:,k).^2)); % unit vector
                g(1,k) = (C(1,1)*n(j,1)*p(1,k)^2+C(1,2)*n(j,2)*p(2,k)*p(1,k)+C(1,3)*n(j,3)*p(3,k)*p(1,k)+C(6,6)*(n(j,1)*p(2,k)^2+n(j,2)*p(1,k)*p(2,k))+C(5,5)*(n(j,1)*p(3,k)^2+n(j,3)*p(1,k)*p(3,k)))/(Material.Density*X(j,k+2)*1e6); % group velocity components vg1
                g(2,k) = (C(6,6)*(n(j,1)*p(2,k)*p(1,k)+n(j,2)*p(1,k)^2)+C(1,2)*n(j,1)*p(1,k)*p(2,k)+C(2,2)*n(j,2)*p(2,k)^2+C(2,3)*n(j,3)*p(3,k)*p(2,k)+C(4,4)*(n(j,2)*p(3,k)^2+n(j,3)*p(2,k)*p(3,k)))/(Material.Density*X(j,k+2)*1e6); % group velocity components vg2
                g(3,k) = (C(5,5)*(n(j,1)*p(3,k)*p(1,k)+n(j,3)*p(1,k)^2)+C(4,4)*(n(j,2)*p(3,k)*p(2,k)+n(j,3)*p(2,k)^2)+C(1,3)*n(j,1)*p(1,k)*p(3,k)+C(2,3)*n(j,2)*p(2,k)*p(3,k)+C(3,3)*n(j,3)*p(3,k)^2)/(Material.Density*X(j,k+2)*1e6); % group velocity components vg3
                G = sqrt(sum(g(:,k).^2)); % group velocity magnitude
                X(j,k+11) = G;
                X(j,3*(k-1)+18) = g(1,k); % group velocity components vg1
                X(j,3*(k-1)+19) = g(2,k); % group velocity components vg2
                X(j,3*(k-1)+20) = g(3,k); % group velocity components vg3
                if  k < 3
                    X(j,k+8) = abs(asind(dot(n(j,:),p(:,k)))); % polarization skew angle of S_fast,S_slow
                else
                    X(j,k+8) = acosd(dot(n(j,:),p(:,k))); % polarization skew angle of L
                end
                X(j,k+14) = acosd(dot(n(j,:),g(:,k)/G)); % energy skew from propagation direction
            end
        end
        X(:,6:8) = 1./X(:,3:5); % slowness (ms/m)
        if  strcmp(Material.Class,'Transversely isotropic') && i == 1
            for j = 3:size(X,2)
                [Extrema(1,j),Extrema(2,j)] = max(X(:,j)); % get maxima and corresponding indices
                [Extrema(3,j),Extrema(4,j)] = min(X(:,j)); % get minima and corresponding indices
            end
        elseif strcmp(Material.Class,'Cubic') || strcmp(Material.Class,'Orthotropic')
            for j = 3:size(X,2)
                if  max(X(:,j)) > Extrema(1,j)
                    [Extrema(1,j),Extrema(2,j)] = max(X(:,j)); % get maxima and corresponding indices
                    Extrema(3,j) = Phi(i);
                end
                if  min(X(:,j)) < Extrema(4,j) 
                    [Extrema(4,j),Extrema(5,j)] = min(X(:,j)); % get minima and corresponding indices
                    Extrema(6,j) = Phi(i);
                end
            end
        end
        X = vertcat(X,flipud(X(1:end-1,:)),X(2:end,:),flipud(X(1:end-1,:))); % extending the data to 360 deg
        X(:,1) = Phi(i)*pi/180; % Phi (rad)
        X(:,2) = 0:2*pi/(4*(length(n)-1)):2*pi; % Theta (rad)
        X(:,12:14) = vertcat(X(1:length(Theta),12:14),X(1:length(Theta)-1,12:14),X(2:length(Theta),12:14),X(1:length(Theta)-1,12:14));
        X(:,[18:19,21:22,24:25]) = vertcat(X(1:length(Theta),[18:19,21:22,24:25]),-X(1:length(Theta)-1,[18:19,21:22,24:25]),-X(2:length(Theta),[18:19,21:22,24:25]),X(1:length(Theta)-1,[18:19,21:22,24:25]));
        X(:,20:3:26) = vertcat(X(1:length(Theta),20:3:26),X(1:length(Theta)-1,20:3:26),-X(2:length(Theta),20:3:26),-X(1:length(Theta)-1,20:3:26));
        X3D(1+(i-1)*(4*length(n)-3):i*(4*length(n)-3),:) = X;
    end
    if  strcmp(Material.Class,'Cubic') || strcmp(Material.Class,'Orthotropic')
        Extrema(3,Extrema(3,:) == Phi(1)) = 0;
        Extrema(6,Extrema(6,:) == Phi(1)) = 0;
        Extrema(3,Extrema(3,:) == Phi(end)) = 90;
        Extrema(6,Extrema(6,:) == Phi(end)) = 90;
    end
    if  strcmp(Material.Class,'Cubic')
        Extrema(3,Extrema(3,:) == Phi(Phi == 45.001)) = 45;
        Extrema(6,Extrema(6,:) == Phi(Phi == 45.001)) = 45;
    end
else
    for i = 1:length(Phi)
        X3D(1+(i-1)*(4*length(Theta)-3):i*(4*length(Theta)-3),1) = Phi(i)*pi/180; % Phi (rad)
        X3D(1+(i-1)*(4*length(Theta)-3):i*(4*length(Theta)-3),2) = 0:2*pi/(4*(length(Theta)-1)):2*pi; % Theta (rad)
    end
    X3D(1:length(Phi)*(4*length(Theta)-3),[3:4,12:13]) = Material.TransverseVelocity/1e3;
    X3D(1:length(Phi)*(4*length(Theta)-3),[5,14]) = Material.LongitudinalVelocity/1e3;
    X3D(1:length(Phi)*(4*length(Theta)-3),6:7) = 1e3/Material.TransverseVelocity;
    X3D(1:length(Phi)*(4*length(Theta)-3),8) = 1e3/Material.LongitudinalVelocity;
end
% content of "X3D" columns:
%  1: Phi (rad)
%  2: Theta (rad)
%  3: S_fast phase velocity (m/ms)
%  4: S_slow phase velocity (m/ms)
%  5: L phase velocity (m/ms)
%  6: S_fast slowness (ms/m)
%  7: S_slow slowness (ms/m)
%  8: L slowness (ms/m)
%  9: S_fast polarization skew angle (deg)
% 10: S_slow polarization skew angle (deg)
% 11: L polarization skew angle (deg)
% 12: S_fast group velocity magnitude (m/ms)
% 13: S_slow group velocity magnitude (m/ms)
% 14: L group velocity magnitude (m/ms)
% 15: S_fast energy skew angle (deg)
% 16: S_slow energy skew angle (deg)
% 17: L energy skew angle (deg)
% 18: S_fast group velocity component vg1 (m/ms)
% 19: S_fast group velocity component vg2 (m/ms)
% 20: S_fast group velocity component vg3 (m/ms)
% 21: S_slow group velocity component vg1 (m/ms)
% 22: S_slow group velocity component vg2 (m/ms)
% 23: S_slow group velocity component vg3 (m/ms)
% 24: L group velocity component vg1 (m/ms)
% 25: L group velocity component vg2 (m/ms)
% 26: L group velocity component vg3 (m/ms)
X3D = vertcat(X3D,X3D(4*length(Theta)-2:end-4*length(Theta)+3,:));
X3D(.5*length(X3D)+1:length(X3D),[1:2,19,22,25]) = -X3D(.5*length(X3D)+1:length(X3D),[1:2,19,22,25]);
PhaseVelocityCartesian(length(X3D),9) = 0;
SlownessCartesian(length(X3D),9) = 0;
[PhaseVelocityCartesian(:,1),PhaseVelocityCartesian(:,2),PhaseVelocityCartesian(:,3)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,3)); % calculate cartesian coordinates x,y,z for phase velocity
[PhaseVelocityCartesian(:,4),PhaseVelocityCartesian(:,5),PhaseVelocityCartesian(:,6)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,4));
[PhaseVelocityCartesian(:,7),PhaseVelocityCartesian(:,8),PhaseVelocityCartesian(:,9)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,5));
if  ~strcmp(Material.Class,'Isotropic')
    GroupVelocityCartesian(:,1:9) = X3D(:,18:26);
else
    [GroupVelocityCartesian(:,1),GroupVelocityCartesian(:,2),GroupVelocityCartesian(:,3)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,12)); % for group velocity
    [GroupVelocityCartesian(:,4),GroupVelocityCartesian(:,5),GroupVelocityCartesian(:,6)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,13));
    [GroupVelocityCartesian(:,7),GroupVelocityCartesian(:,8),GroupVelocityCartesian(:,9)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,14));
end
[EnergySkewCartesian(:,1),EnergySkewCartesian(:,2),EnergySkewCartesian(:,3)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,15)); % for energy skew
[EnergySkewCartesian(:,4),EnergySkewCartesian(:,5),EnergySkewCartesian(:,6)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,16));
[EnergySkewCartesian(:,7),EnergySkewCartesian(:,8),EnergySkewCartesian(:,9)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,17));
[SlownessCartesian(:,1),SlownessCartesian(:,2),SlownessCartesian(:,3)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,6)); % for slowness
[SlownessCartesian(:,4),SlownessCartesian(:,5),SlownessCartesian(:,6)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,7));
[SlownessCartesian(:,7),SlownessCartesian(:,8),SlownessCartesian(:,9)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,8));
[PolarizationSkewCartesian(:,1),PolarizationSkewCartesian(:,2),PolarizationSkewCartesian(:,3)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,9)); % for polarization skew angle
[PolarizationSkewCartesian(:,4),PolarizationSkewCartesian(:,5),PolarizationSkewCartesian(:,6)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,10));
[PolarizationSkewCartesian(:,7),PolarizationSkewCartesian(:,8),PolarizationSkewCartesian(:,9)] = sph2cart(X3D(:,1),X3D(:,2),X3D(:,11));
if  strcmp(Material.Class,'Orthotropic')
    String = ['Material: ',Material.Name,newline,...
    'Class: ',Material.Class,newline,...
    newline,...
    '(QUASI) LONGITUDINAL WAVES (L)',newline,...
    'Velocity max = ',num2str(Extrema(1,5)),' m/ms',newline,...
    '@ Phi = ',num2str(Extrema(3,5)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,5),2))),' deg',newline,...
    'Velocity min = ',num2str(Extrema(4,5)),' m/ms',newline,...
    '@ Phi = ',num2str(Extrema(6,5)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(5,5),2))),' deg',newline,...
    'Polarization skew max = ',num2str(Extrema(1,11)),' deg',newline,...
    '@ Phi = ',num2str(Extrema(3,11)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,11),2))),' deg',newline,...
    'Energy skew max = ',num2str(Extrema(1,17)),' deg',newline,...
    '@ Phi = ',num2str(Extrema(3,17)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,17),2))),' deg',newline,...
    newline,...
    'FAST (QUASI) SHEAR WAVES (Sfast)',newline,...
    'Phase velocity max = ',num2str(Extrema(1,3)),' m/ms',newline,...
    '@ Phi = ',num2str(Extrema(3,3)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,3),2))),' deg',newline,...
    'Group velocity max = ',num2str(Extrema(1,12)),' m/ms',newline,...
    '@ Phi = ',num2str(Extrema(3,12)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,12),2))),' deg',newline,...
    'Velocity min = ',num2str(Extrema(4,3)),' m/ms',newline,...
    '@ Phi = ',num2str(Extrema(6,3)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(5,3),2))),' deg',newline,...
    'Polarization skew max = ',num2str(Extrema(1,9)),' deg',newline,...
    '@ Phi = ',num2str(Extrema(3,9)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,9),2))),' deg',newline,...
    'Energy skew max = ',num2str(Extrema(1,15)),' deg',newline,...
    '@ Phi = ',num2str(Extrema(3,15)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,15),2))),' deg',newline,...
    newline,...
    'SLOW (QUASI) SHEAR WAVES (Sslow)',newline,...
    'Phase velocity max = ',num2str(Extrema(1,4)),' m/ms',newline,...
    '@ Phi = ',num2str(Extrema(3,4)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,4),2))),' deg',newline,...
    'Group velocity max = ',num2str(Extrema(1,13)),' m/ms',newline,...
    '@ Phi = ',num2str(Extrema(3,13)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,13),2))),' deg',newline,...
    'Velocity min = ',num2str(Extrema(4,4)),' m/ms'];
    if  rad2deg(X3D(Extrema(5,4),2)) == 90
        String = append(String,newline,'@ Theta = ',num2str(rad2deg(X3D(Extrema(5,4),2))),' deg');
    else
        String = append(String,newline,'@ Phi = ',num2str(Extrema(6,4)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(5,4),2))),' deg');
    end
    String = append(String,newline,...
    'Polarization skew max = ',num2str(Extrema(1,10)),' deg',newline,...
    '@ Phi = ',num2str(Extrema(3,10)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,10),2))),' deg',newline,...
    'Energy skew max = ',num2str(Extrema(1,16)),' deg',newline,...
    '@ Phi = ',num2str(Extrema(3,16)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,16),2))),' deg');
elseif strcmp(Material.Class,'Transversely isotropic')
    String = ['Material: ',Material.Name,newline,...
    'Class: ',Material.Class,newline,...
    newline,...
    '(QUASI) LONGITUDINAL WAVES (L)',newline,...
    'Velocity max = ',num2str(Extrema(1,5)),' m/ms',newline,...
    '@ Theta = 0 deg',newline,...
    'Velocity min = ',num2str(Extrema(3,5)),' m/ms',newline,...
    '@ Theta = 90 deg',newline,...
    'Polarization skew max = ',num2str(Extrema(1,11)),' deg',newline,...
    '@ Theta = ',num2str(rad2deg(X3D(Extrema(2,11),2))),' deg (Phi = 0 deg)',newline,...
    'Energy skew max = ',num2str(Extrema(1,17)),' deg',newline,...
    '@ Theta = ',num2str(rad2deg(X3D(Extrema(2,17),2))),' deg (Phi = 0 deg)',newline,...
    newline,...
    'FAST (QUASI) SHEAR WAVES (Sfast)',newline,...
    'Phase velocity max = ',num2str(Extrema(1,3)),' m/ms',newline,...
    '@ Theta = ',num2str(rad2deg(X3D(Extrema(2,3),2))),' deg (Phi = 0 deg)',newline,...
    'Group velocity max = ',num2str(Extrema(1,12)),' m/ms',newline,...
    '@ Theta = ',num2str(rad2deg(X3D(Extrema(2,12),2))),' deg (Phi = 0 deg)',newline,...
    'Velocity min = ',num2str(Extrema(3,3)),' m/ms',newline,...
    '@ Theta = 0 deg, 90 deg',newline,...
    'Polarization skew max = ',num2str(Extrema(1,9)),' deg',newline,...
    '@ Theta = ',num2str(rad2deg(X3D(Extrema(2,9),2))),' deg (Phi = 0 deg)',newline,...
    'Energy skew max = ',num2str(Extrema(1,15)),' deg',newline,...
    '@ Theta = ',num2str(rad2deg(X3D(Extrema(2,15),2))),' deg (Phi = 0 deg)',newline,...
    newline,...
    'SLOW SHEAR WAVES (Sslow)',newline,...
    'Velocity max = ',num2str(Extrema(1,4)),' m/ms',newline,...
    '@ Theta = 0 deg',newline,...
    'Velocity min = ',num2str(Extrema(3,4)),' m/ms',newline,...
    '@ Theta = 90 deg',newline,...
    'Polarization skew = 0 deg',newline,...
    'Energy skew max = ',num2str(Extrema(1,16)),' deg',newline,...
    '@ Theta = ',num2str(rad2deg(X3D(Extrema(2,16),2))),' deg (Phi = 0 deg)'];
elseif strcmp(Material.Class,'Cubic')
    String = ['Material: ',Material.Name,newline,...
    'Class: ',Material.Class,newline,...
    newline,...
    '(QUASI) LONGITUDINAL WAVES (L)',newline,...
    'Velocity max = ',num2str(Extrema(1,5)),' m/ms',newline,...
    '@ Phi = ',num2str(Extrema(3,5)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,5),2))),' deg',newline,...
    'Velocity min = ',num2str(Extrema(4,14)),' m/ms',newline,...
    '@ Theta = 0 deg, 90 deg',newline,...
    'Polarization skew max = ',num2str(Extrema(1,11)),' deg',newline,...
    '@ Phi = ',num2str(Extrema(3,11)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,11),2))),' deg',newline,...
    'Energy skew max = ',num2str(Extrema(1,17)),' deg',newline,...
    '@ Phi = ',num2str(Extrema(3,17)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,17),2))),' deg',newline,...
    newline,...
    'FAST (QUASI) SHEAR WAVES (Sfast)',newline,...
    'Phase velocity max = ',num2str(Extrema(1,3)),' m/ms',newline,...
    '@ Phi = 0 deg, 90 deg',newline,...
    'Phase velocity min = ',num2str(Extrema(4,3)),' m/ms',newline,...
    '@ Phi = ',num2str(Extrema(6,3)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(5,3),2))),' deg',newline,...
    'Group velocity max = ',num2str(Extrema(1,12)),' m/ms',newline,...
    '@ Phi = ',num2str(Extrema(3,12)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,12),2))),' deg',newline,...
    'Group velocity min = ',num2str(Extrema(4,12)),' m/ms',newline,...
    '@ Phi = ',num2str(Extrema(6,12)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(5,12),2))),' deg',newline,...
    'Polarization skew max = ',num2str(Extrema(1,9)),' deg',newline,...
    '@ Phi = ',num2str(Extrema(3,9)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,9),2))),' deg',newline,...
    'Energy skew max = ',num2str(Extrema(1,15)),' deg',newline,...
    '@ Phi = ',num2str(Extrema(3,15)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,15),2))),' deg',newline,...
    newline,...
    'SLOW (QUASI) SHEAR WAVES (Sslow)',newline,...
    'Phase velocity max = ',num2str(Extrema(1,4)),' m/ms',newline,...
    '@ Theta = 0 deg, 90 deg',newline,...
    'Group velocity max = ',num2str(Extrema(1,13)),' m/ms',newline,...
    '@ Phi = 0 deg, 90 deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,13),2))),' deg',newline,...
    'Velocity min = ',num2str(Extrema(4,13)),' m/ms',newline,...
    '@ Phi = 0 deg, 90 deg, Theta = ',num2str(rad2deg(X3D(Extrema(5,13),2))),' deg',newline,...
    'Polarization skew max = ',num2str(Extrema(1,10)),' deg',newline,...
    '@ Phi = ',num2str(Extrema(3,10)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,10),2))),' deg',newline,...
    'Energy skew max = ',num2str(Extrema(1,16)),' deg',newline,...
    '@ Phi = ',num2str(Extrema(3,16)),' deg, Theta = ',num2str(rad2deg(X3D(Extrema(2,16),2))),' deg'];
elseif strcmp(Material.Class,'Isotropic')
    String = ['Material: ',Material.Name,newline,...
    'Class: ',Material.Class,newline,...
    newline,...
    'LONGITUDINAL WAVES (L)',newline,...
    'Velocity = ',num2str(Material.LongitudinalVelocity/1e3),' m/ms',newline,...
    'Polarization skew = 0 deg',newline,...
    'Energy skew = 0 deg',newline,...
    newline,...
    'SHEAR WAVES (SV, SH)',newline,...
    'Velocity = ',num2str(Material.TransverseVelocity/1e3),' m/ms',newline,...
    'Polarization skew = 0 deg',newline,...
    'Energy skew = 0 deg'];
end
OutputWindowUI8.String = String;
disp([String,newline,'---------------------------------'])